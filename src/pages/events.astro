---
import { getCollection, getEntry } from 'astro:content'
import Layout from '@levino/shipyard-base/layouts/Page.astro'
import { nonEmptyArray } from 'fp-ts'
import * as A from 'fp-ts/Array'
import { pipe } from 'fp-ts/function'
import * as R from 'fp-ts/Record'
import type { FullEvent } from '@/types'
import EventCard from '../components/EventCard.astro'
import StickyButton from '../components/StickyButton.astro'

const MONTHS = [
  'Januar',
  'Februar',
  'März',
  'April',
  'Mai',
  'Juni',
  'Juli',
  'August',
  'September',
  'Oktober',
  'November',
  'Dezember',
]

const futureEvents = await getCollection(
  'events',
  ({ data }) => data.startDate > new Date(),
)
  .then(
    (events) =>
      events.map(async (event) => ({
        ...event,
        data: {
          ...event.data,
          ...(event.data.location
            ? {
                location: await getEntry(event.data.location),
              }
            : {}),
          ...(event.data.organizer
            ? {
                organizer: await getEntry(event.data.organizer),
              }
            : {}),
        },
      })) as unknown as Promise<FullEvent[]>,
  )
  .then((events) => Promise.all(events))

const events = pipe(
  futureEvents,
  nonEmptyArray.groupBy((event: FullEvent) =>
    event.data.startDate.toLocaleString('de-DE', {
      year: 'numeric',
    }),
  ),
  R.map(
    nonEmptyArray.groupBy((event: FullEvent) =>
      event.data.startDate.toLocaleString('de-DE', {
        month: 'long',
      }),
    ),
  ),
)
---

<Layout
  title="Veranstaltungen in Rössing"
  description="Hier finden Sie alle Veranstaltungen in Rössing."
>
  <div class="container flex flex-col mx-auto p-8">
    <h1 class="text-4xl font-bold mb-8 dark:text-slate-100">
      Veranstaltungen in Rössing
    </h1>
    {
      pipe(
        events,
        R.toEntries,
        A.map(([year, eventsInThisYearByMonth]) => (
          <>
            <div>{year}</div>
            {MONTHS.map((month) => {
              const eventsInThisMonth = eventsInThisYearByMonth[month]
              if (!eventsInThisMonth) return null
              return (
                <div class="mb-8 flex flex-col">
                  <h2 class="text-2xl font-bold mb-4 dark:text-slate-200">
                    {month}
                  </h2>
                  <div class="flex flex-col mx-auto">
                    {eventsInThisMonth.map((event) => (
                      <EventCard event={event} />
                    ))}
                  </div>
                </div>
              )
            })}
          </>
        )),
      )
    }
  </div>
  <StickyButton />
</Layout>
