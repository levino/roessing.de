---
import { getImage } from 'astro:assets'
import { getCollection, getEntry } from 'astro:content'
import Layout from '@levino/shipyard-base/layouts/Page.astro'
import type { GetStaticPaths } from 'astro'
import Event from '@/components/Event.astro'
import type { Event as EventType, FullEvent } from '@/types'
export const getStaticPaths: GetStaticPaths = async () => {
  const events = await getCollection('events')
  return events.map((entry) => ({
    params: {
      id: entry.id,
    },
    props: {
      entry,
    },
  }))
}

const { entry } = Astro.props as { entry: EventType }
const event = {
  ...entry,
  data: {
    ...entry.data,
    ...(entry.data.location
      ? {
          location: await getEntry(entry.data.location),
        }
      : {}),
    ...(entry.data.organizer
      ? {
          organizer: await getEntry(entry.data.organizer),
        }
      : {}),
  },
} as FullEvent

const imageUrl = entry.data.image
  ? (await getImage({ src: event.data.image?.src || '' })).src
  : undefined

const ogImage = entry.data.image
  ? await getImage({ src: event.data.image?.src || '', width: 1200 })
  : undefined

const googleStructuredEventData = JSON.stringify({
  '@context': 'https://schema.org',
  '@type': 'Event',
  ...event.data,
  ...(event.data.organizer ? { organizer: event.data.organizer.data } : {}),
  ...(event.data.location ? { location: event.data.location.data } : {}),
  ...(imageUrl ? { image: imageUrl } : {}),
})
---

<Layout title={event?.data.name} description={event?.data.description} ogImage={ogImage?.src}>
  <Event event={event} />
</Layout>

<script is:inline type="application/ld+json" set:html={googleStructuredEventData} />
